<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mobile on (not)Unique experience</title>
    <link>https://fi5t.xyz/en/tags/mobile/</link>
    <description>Recent content in mobile on (not)Unique experience</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <lastBuildDate>Wed, 24 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://fi5t.xyz/en/tags/mobile/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Evolution of vulnerabilities in Android apps</title>
      <link>https://fi5t.xyz/en/posts/evolution-of-vulnerabilities-in-android-apps/</link>
      <pubDate>Wed, 24 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://fi5t.xyz/en/posts/evolution-of-vulnerabilities-in-android-apps/</guid>
      <description>The history of Android app development has gone through several notable stages, from small apps running locally, to client-server apps, app ecosystems, and super-apps. Each of these stages raised the bar of complexity, creating new vulnerabilities, and increased developers&amp;rsquo; concern about the security of both the applications and the data they operate with. The operating system itself has evolved, providing developers with more options and security mechanisms. But there are always a few more unknowns in this system of equations than meets the eye.</description>
    </item>
    
    <item>
      <title>Mobile application security</title>
      <link>https://fi5t.xyz/en/posts/mobile-apps-security/</link>
      <pubDate>Tue, 23 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://fi5t.xyz/en/posts/mobile-apps-security/</guid>
      <description>In 2022, our team discovered 216 vulnerabilities during studies of 25 pairs of apps for Android and iOS platforms. The storage of user data in clear text accounted for the largest share of vulnerabilities (14%). Despite the efforts of operation system developers and secure application development communities, this class of vulnerability has continued to be the most prevalent for several years in a row. This trend will remain relevant in 2023, although it is now very simple to use cryptography in mobile applications: both vendor and open-source solutions make working with cryptographic primitives easier for developers.</description>
    </item>
    
  </channel>
</rss>
